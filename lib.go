package desafiogo

/*
	AS DESCRIBED IN THE RULES: DO NOT EDIT THIS FILE!!!
*/

import (
	"math"
	"math/rand"
	"sort"
	"time"
)

type Result struct {
	Average      float64
	Median       float64
	Percentile90 float64
	Percentile99 float64
	Mode         float64
	HasNumber47  bool
}

type RunFunc func([]float64) *Result

func calculateAverage(data []float64) float64 {
	dataCpy := append(make([]float64, 0, len(data)), data...)

	sum := float64(0)
	for _, d := range dataCpy {
		sum += d
	}
	return sum / float64(len(dataCpy))
}

func calculateMedian(data []float64) float64 {
	dataCpy := append(make([]float64, 0, len(data)), data...)

	if !sort.IsSorted(sort.Float64Slice(dataCpy)) {
		sort.Float64s(dataCpy)
	}

	i := int(math.Floor(float64(len(dataCpy)) / 2))
	if len(dataCpy)%2 != 0 {
		return dataCpy[i]
	}
	return (dataCpy[i-1] + dataCpy[i]) / 2
}

func calculatePercentile(data []float64, perc int) float64 {
	if perc < 1 && perc > 100 {
		return math.NaN()
	}
	dataCpy := append(make([]float64, 0, len(data)), data...)

	if !sort.IsSorted(sort.Float64Slice(dataCpy)) {
		sort.Float64s(dataCpy)
	}

	i := math.Round(float64(perc) / 100 * float64(len(dataCpy)))
	return dataCpy[int(i)-1]
}

func getRandDataSlice(n int) []float64 {
	rand.Seed(time.Now().UnixNano())
	data := make([]float64, 0)
	for i := 0; i < n; i++ {
		data = append(data, float64(rand.Intn(100))+rand.Float64())
	}
	return data
}

func getDataSlice() []float64 {
	return []float64{
		16.08268919495755,
		29.167919041328624,
		5.909539231104233,
		81.21076312450899,
		34.02023932515904,
		77.6479413603064,
		18.639363808533496,
		11.197236175557173,
		86.98208277300004,
		23.61950021719352,
		14.973948016660938,
		42.208473997349856,
		95.42694498275333,
		60.51808026551609,
		91.01493281300392,
		23.059597021050642,
		29.394971788144346,
		87.29120718475738,
		77.617308762567,
		27.842312505662566,
		83.3995431333358,
		6.588006967874689,
		41.178480071956834,
		13.614745209616263,
		99.95519419404887,
		90.80600630442046,
		70.6035368455075,
		80.03740874348517,
		22.766800173393126,
		10.108546013017625,
	}
}
